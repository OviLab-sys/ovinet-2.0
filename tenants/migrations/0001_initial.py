# Generated by Django 5.2.6 on 2025-09-23 10:02

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_tenants.postgresql_backend.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MpesaTransaction',
            fields=[
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('merchant_request_id', models.CharField(max_length=100, unique=True)),
                ('checkout_request_id', models.CharField(max_length=100, unique=True)),
                ('response_code', models.CharField(max_length=10)),
                ('response_description', models.TextField()),
                ('customer_message', models.TextField()),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActiveSession',
            fields=[
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('session_status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the session', max_length=20)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, help_text='When the session started')),
                ('end_time', models.DateTimeField(blank=True, help_text='When the session ended', null=True)),
                ('data_used_mb', models.BigIntegerField(default=0, help_text='Data used in this session (MB)')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text="User's IP address", null=True)),
                ('mac_address', models.CharField(blank=True, help_text="User's MAC address", max_length=17, null=True)),
                ('mikrotik_session_id', models.CharField(blank=True, help_text='MikroTik session ID for tracking', max_length=100, null=True)),
                ('max_duration_minutes', models.PositiveIntegerField(default=1440, help_text='Maximum allowed session duration in minutes')),
                ('user', models.ForeignKey(help_text='User associated with this session', on_delete=django.db.models.deletion.CASCADE, related_name='active_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Active Session',
                'verbose_name_plural': 'Active Sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='DataPackage',
            fields=[
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('data_limit_mb', models.PositiveIntegerField(help_text='Data limit in megabytes', validators=[django.core.validators.MinValueValidator(1)])),
                ('duration_status', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', help_text='Billing duration period', max_length=10)),
                ('duration_days', models.PositiveIntegerField(default=1, help_text='Number of days the package is valid', validators=[django.core.validators.MinValueValidator(1)])),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in local currency', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('bandwidth_limit_mbps', models.PositiveIntegerField(default=5, help_text='Maximum bandwidth speed in Mbps', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this package is available for purchase')),
            ],
            options={
                'verbose_name': 'Data Package',
                'verbose_name_plural': 'Data Packages',
                'ordering': ['price'],
                'indexes': [models.Index(fields=['is_active'], name='tenants_dat_is_acti_5e40ce_idx'), models.Index(fields=['price'], name='tenants_dat_price_3d08a0_idx')],
            },
        ),
        migrations.CreateModel(
            name='PausedSession',
            fields=[
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('paused_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the session was paused')),
                ('resumed_at', models.DateTimeField(blank=True, help_text='When the session was resumed', null=True)),
                ('pause_reason', models.CharField(choices=[('user_request', 'User Request'), ('admin_action', 'Admin Action'), ('system_auto', 'System Auto-pause'), ('payment_issue', 'Payment Issue'), ('other', 'Other')], default='other', help_text='Reason for pausing the session', max_length=20)),
                ('pause_description', models.TextField(blank=True, help_text='Additional details about the pause', null=True)),
                ('paused_by', models.ForeignKey(blank=True, help_text='User who paused the session', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paused_sessions', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(help_text='The session that was paused', on_delete=django.db.models.deletion.CASCADE, related_name='pause_history', to='tenants.activesession')),
            ],
            options={
                'verbose_name': 'Paused Session',
                'verbose_name_plural': 'Paused Sessions',
                'ordering': ['-paused_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('purchase_date', models.DateTimeField(auto_now_add=True, help_text='When the subscription was purchased')),
                ('expiry_date', models.DateTimeField(help_text='When the subscription expires')),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the subscription', max_length=20)),
                ('simultaneous_connections', models.PositiveIntegerField(default=1, help_text='Maximum number of simultaneous connections allowed', validators=[django.core.validators.MinValueValidator(1)])),
                ('current_connections', models.PositiveIntegerField(default=0, help_text='Current number of active connections')),
                ('data_used_mb', models.BigIntegerField(default=0, help_text='Total data used in megabytes')),
                ('package', models.ForeignKey(help_text='The data package purchased', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='tenants.datapackage')),
                ('user', models.ForeignKey(help_text='User who purchased this subscription', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Subscription',
                'verbose_name_plural': 'User Subscriptions',
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.AddField(
            model_name='activesession',
            name='subscription',
            field=models.ForeignKey(blank=True, help_text='Subscription used for this session', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='active_sessions', to='tenants.usersubscription'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['status'], name='tenants_use_status_b788a8_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['expiry_date'], name='tenants_use_expiry__013c30_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user', 'status'], name='tenants_use_user_id_db1d71_idx'),
        ),
        migrations.AddIndex(
            model_name='activesession',
            index=models.Index(fields=['session_status'], name='tenants_act_session_8faa80_idx'),
        ),
        migrations.AddIndex(
            model_name='activesession',
            index=models.Index(fields=['start_time'], name='tenants_act_start_t_ea996c_idx'),
        ),
        migrations.AddIndex(
            model_name='activesession',
            index=models.Index(fields=['user', 'session_status'], name='tenants_act_user_id_ee9556_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='activesession',
            unique_together={('user', 'subscription', 'session_status')},
        ),
    ]
